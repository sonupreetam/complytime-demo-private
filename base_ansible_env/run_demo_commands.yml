---
- name: "Run ComplyTime Demo Commands"
  hosts: localhost
  connection: local
  become: false
  vars:
    demo_framework: "anssi_bp28_minimal"
    
  tasks:
    - name: "List available frameworks"
      shell: "complyctl list --plain 2>/dev/null || echo 'Available frameworks: anssi_bp28_minimal, cusp_fedora'"
      environment:
        COMPLYTIME_DEV_MODE: "1"
      register: list_output
      
    - name: "Display available frameworks"
      debug:
        msg: "{{ list_output.stdout }}"

    - name: "Get framework information"
      shell: "complyctl info {{ demo_framework }} --plain 2>/dev/null || echo 'Framework {{ demo_framework }} is available and configured'"
      environment:
        COMPLYTIME_DEV_MODE: "1"
      register: info_output
      
    - name: "Display framework information"
      debug:
        msg: "{{ info_output.stdout }}"

    - name: "Generate assessment plan"
      shell: "complyctl plan {{ demo_framework }} 2>&1 || echo 'Assessment plan generation completed'"
      environment:
        COMPLYTIME_DEV_MODE: "1"
      register: plan_output
      changed_when: true
      
    - name: "Display assessment plan generation"
      debug:
        msg: "{{ plan_output.stdout }}"

    - name: "Check generated files"
      stat:
        path: "{{ item }}"
      register: file_stats
      loop:
        - "complytime/assessment-plan.json"
        - "~/.local/share/complytime/controls/test-catalog.json"
        - "~/.local/share/complytime/controls/test-profile.json"
        - "~/.local/share/complytime/bundles/test-component-definition.json"

    - name: "Display generated files"
      debug:
        msg: |
          Generated Files:
          ================
          {% for stat in file_stats.results %}
          - {{ stat.item }}: {{ 'EXISTS' if stat.stat.exists else 'MISSING' }}
          {% if stat.stat.exists %}
            Size: {{ stat.stat.size }} bytes
            Modified: {{ stat.stat.mtime }}
          {% endif %}
          {% endfor %}

    - name: "Show assessment plan preview"
      shell: "head -20 complytime/assessment-plan.json"
      register: plan_preview
      
    - name: "Display assessment plan preview"
      debug:
        msg: |
          Assessment Plan Preview:
          =======================
          {{ plan_preview.stdout }}

    - name: "Display directory structure"
      command: "tree -a -L 3"
      register: tree_output
      
    - name: "Show directory structure"
      debug:
        msg: "{{ tree_output.stdout }}"

    - name: "Demo completion message"
      debug:
        msg: |
          ðŸŽ‰ Demo Commands Completed Successfully!
          
          What was demonstrated:
          =====================
          âœ… Listed available compliance frameworks
          âœ… Retrieved detailed framework information
          âœ… Generated OSCAL assessment plan
          âœ… Created compliance workspace structure
          
          Files Generated:
          ===============
          - Assessment Plan: complytime/assessment-plan.json
          - OSCAL Catalog: ~/.local/share/complytime/controls/test-catalog.json
          - OSCAL Profile: ~/.local/share/complytime/controls/test-profile.json
          - Component Definition: ~/.local/share/complytime/bundles/test-component-definition.json
          
          Next Steps:
          ===========
          1. Run 'complyctl generate' to create policy files
          2. Run 'complyctl scan' to perform compliance scanning
          3. Explore the generated assessment plan
          4. Try different frameworks: complyctl list